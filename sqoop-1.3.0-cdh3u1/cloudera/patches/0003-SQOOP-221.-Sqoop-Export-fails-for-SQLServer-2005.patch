From 9728030776c0226415ad0302699de98dbed22731 Mon Sep 17 00:00:00 2001
From: Arvind Prabhakar <arvind@cloudera.com>
Date: Thu, 30 Jun 2011 04:18:53 -0700
Subject: [PATCH 3/7] SQOOP-221. Sqoop Export fails for SQLServer 2005.

This change introduces a new Connection Manager for SQL Server along
with basic test case to exercise part of the functionality. It also
addresses the problem noted in SQOOP-229 by overriding the
getCurTimestampQuery method as suggested.

(Patrick Angeles via Arvind Prabhakar)
---
 COMPILING.txt                                      |   25 ++
 build.xml                                          |   28 ++-
 .../sqoop/manager/DefaultManagerFactory.java       |    3 +
 .../cloudera/sqoop/manager/SQLServerManager.java   |   70 ++++++
 .../mapreduce/SQLServerExportOutputFormat.java     |  111 +++++++++
 .../manager/SQLServerManagerImportManualTest.java  |  244 ++++++++++++++++++++
 6 files changed, 479 insertions(+), 2 deletions(-)
 create mode 100644 src/java/com/cloudera/sqoop/manager/SQLServerManager.java
 create mode 100644 src/java/com/cloudera/sqoop/mapreduce/SQLServerExportOutputFormat.java
 create mode 100644 src/test/com/cloudera/sqoop/manager/SQLServerManagerImportManualTest.java

diff --git a/COMPILING.txt b/COMPILING.txt
index abb430c..d403dc1 100644
--- a/COMPILING.txt
+++ b/COMPILING.txt
@@ -109,6 +109,24 @@ sqoop.test.postgresql.connectstring.host_url=jdbc:postgresql://sqoop-dbs.sf.clou
 If not specified, the default value used for this property is:
 jdbc:postgresql://localhost/
 
+=== SQL Server
+
+Install SQL Server Express 2008 R2 and create a database instance and
+download the appropriate JDBC driver. Instructions for configuring the
+database can be found in SQLServerManagerImportManualTest.
+
+Use the system property sqoop.test.sqlserver.connectstring.host_url to specify
+the URL for the SQL Server host used for testing. Specify this property on the
+command line or via the build.properties file. For example:
+
+sqoop.test.sqlserver.connectstring.host_url=jdbc:sqlserver://sqlserverhost:1433
+
+If not specified, the default value used for this property is:
+jdbc:sqlserver://sqlserverhost:1433
+
+This can be useful if you have the hostname sqlserverhost mapped to the IP
+address of the SQL Server instance.
+
 === Running the Third-party Tests
 
 After the third-party databases are installed and configured, run:
@@ -117,6 +135,13 @@ After the third-party databases are installed and configured, run:
 ant test -Dthirdparty=true -Dsqoop.thirdparty.lib.dir=/path/to/jdbc/drivers/
 ++++
 
+This command will run all thirdparty tests except for the SQL Server test.
+To run the SQL Server test, specify the property "manual" instead of "thirdparty"
+as follows:
+
+++++
+ant test -Dmanual=true -Dsqoop.thirdparty.lib.dir=/path/to/jdbc/drivers/
+++++
 
 Note that +sqoop.thirdparty.lib.dir+ can also be specified in
 +build.properties+.
diff --git a/build.xml b/build.xml
index 844ee33..ebaf5ac 100644
--- a/build.xml
+++ b/build.xml
@@ -201,6 +201,9 @@
   <property name="sqoop.test.postgresql.connectstring.host_url"
             value="jdbc:postgresql://localhost/"/>
 
+  <property name="sqoop.test.sqlserver.connectstring.host_url"
+            value="jdbc:sqlserver://sqlserverhost:1433"/>
+
   <!-- load ant-contrib tasks to get the "if" task. -->
   <taskdef resource="net/sf/antcontrib/antcontrib.properties">
     <classpath>
@@ -484,9 +487,20 @@
   </target>
 
   <!-- set variables that configure the actual test -->
-  <target name="test-prep" depends="test-prep-normal,test-prep-thirdparty"/>
+  <target name="test-prep" depends="test-prep-normal,test-prep-thirdparty,
+                                    test-prep-manual"/>
+
+  <target name="test-eval-condition">
+    <condition property="thirdparty_or_manual">
+      <or>
+        <isset property="thirdparty"/>
+        <isset property="manual"/>
+      </or>
+    </condition>
+  </target>
 
-  <target name="test-prep-normal" unless="thirdparty">
+  <target name="test-prep-normal" unless="thirdparty_or_manual" 
+                                  depends="test-eval-condition">
     <!-- Set this to run all the "standard" tests -->
     <property name="test.pattern" value="Test*" />
     <property name="cobertura.testset" value="base" />
@@ -496,9 +510,16 @@
     <!-- Run tests that *end* with the name Test, instead of starting with it;
          this runs non-standard tests e.g. third-party database tests. -->
     <property name="test.pattern" value="*Test" />
+    <property name="test.exclude" value="*ManualTest" />
     <property name="cobertura.testset" value="thirdparty" />
   </target>
 
+  <target name="test-prep-manual" if="manual">
+    <!-- Run tests that are marked for manualtest execution -->
+    <property name="test.pattern" value="*ManualTest" />
+    <property name="cobertura.testset" value="manual" />
+  </target>
+
   <!-- ================================================================== -->
   <!-- Run unit tests                                                     -->
   <!-- By default, we'll run the "normal" tests: Test*.java               -->
@@ -598,6 +619,9 @@
       <sysproperty key="sqoop.test.postgresql.connectstring.host_url"
                    value="${sqoop.test.postgresql.connectstring.host_url}"/>
 
+      <sysproperty key="sqoop.test.sqlserver.connectstring.host_url"
+                   value="${sqoop.test.sqlserver.connectstring.host_url}"/>
+
       <classpath>
         <!-- instrumented classes go ahead of normal classes -->
         <pathelement location="${cobertura.class.dir}" />
diff --git a/src/java/com/cloudera/sqoop/manager/DefaultManagerFactory.java b/src/java/com/cloudera/sqoop/manager/DefaultManagerFactory.java
index d989f2c..e95d025 100644
--- a/src/java/com/cloudera/sqoop/manager/DefaultManagerFactory.java
+++ b/src/java/com/cloudera/sqoop/manager/DefaultManagerFactory.java
@@ -35,6 +35,7 @@ public final class DefaultManagerFactory extends ManagerFactory {
   public static final Log LOG = LogFactory.getLog(
       DefaultManagerFactory.class.getName());
 
+  @Override
   public ConnManager accept(JobData data) {
     SqoopOptions options = data.getSqoopOptions();
     String manualDriver = options.getDriverClassName();
@@ -116,6 +117,8 @@ public final class DefaultManagerFactory extends ManagerFactory {
       return new HsqldbManager(options);
     } else if (scheme.startsWith("jdbc:oracle:")) {
       return new OracleManager(options);
+    } else if (scheme.startsWith("jdbc:sqlserver:")) {
+      return new SQLServerManager(options);
     } else {
       return null;
     }
diff --git a/src/java/com/cloudera/sqoop/manager/SQLServerManager.java b/src/java/com/cloudera/sqoop/manager/SQLServerManager.java
new file mode 100644
index 0000000..e1ce2af
--- /dev/null
+++ b/src/java/com/cloudera/sqoop/manager/SQLServerManager.java
@@ -0,0 +1,70 @@
+/**
+ * Licensed to Cloudera, Inc. under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  Cloudera, Inc. licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.cloudera.sqoop.manager;
+
+import java.io.IOException;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import com.cloudera.sqoop.SqoopOptions;
+import com.cloudera.sqoop.mapreduce.JdbcExportJob;
+import com.cloudera.sqoop.mapreduce.SQLServerExportOutputFormat;
+import com.cloudera.sqoop.util.ExportException;
+
+/**
+ * Manages connections to SQLServer databases. Requires the SQLServer JDBC
+ * driver.
+ */
+public class SQLServerManager extends GenericJdbcManager {
+
+  public static final Log LOG = LogFactory.getLog(
+      SQLServerManager.class.getName());
+
+  // driver class to ensure is loaded when making db connection.
+  private static final String DRIVER_CLASS =
+      "com.microsoft.sqlserver.jdbc.SQLServerDriver";
+
+  public SQLServerManager(final SqoopOptions opts) {
+    super(DRIVER_CLASS, opts);
+  }
+
+  /**
+   * Export data stored in HDFS into a table in a database.
+   */
+  @Override
+  public void exportTable(ExportJobContext context)
+      throws IOException, ExportException {
+    context.setConnManager(this);
+    JdbcExportJob exportJob = new JdbcExportJob(context, null, null,
+      SQLServerExportOutputFormat.class);
+    exportJob.runExport();
+  }
+
+  /**
+   * SQLServer does not support the CURRENT_TIMESTAMP() function. Instead
+   * it has the notion of keyword CURRENT_TIMESTAMP that resolves to the
+   * current time stamp for the database system.
+   */
+  @Override
+  public String getCurTimestampQuery() {
+      return "SELECT CURRENT_TIMESTAMP";
+  }
+}
+
diff --git a/src/java/com/cloudera/sqoop/mapreduce/SQLServerExportOutputFormat.java b/src/java/com/cloudera/sqoop/mapreduce/SQLServerExportOutputFormat.java
new file mode 100644
index 0000000..0e337a7
--- /dev/null
+++ b/src/java/com/cloudera/sqoop/mapreduce/SQLServerExportOutputFormat.java
@@ -0,0 +1,111 @@
+/**
+ * Licensed to Cloudera, Inc. under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  Cloudera, Inc. licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.cloudera.sqoop.mapreduce;
+
+import java.io.IOException;
+import java.sql.SQLException;
+
+import org.apache.hadoop.mapreduce.RecordWriter;
+import org.apache.hadoop.mapreduce.TaskAttemptContext;
+
+import com.cloudera.sqoop.lib.SqoopRecord;
+
+/**
+ * SQLServer-specific SQL formatting overrides default ExportOutputFormat's.
+ */
+public class SQLServerExportOutputFormat<K extends SqoopRecord, V>
+    extends ExportOutputFormat<K, V> {
+
+  @Override
+  /** {@inheritDoc} */
+  public RecordWriter<K, V> getRecordWriter(TaskAttemptContext context)
+      throws IOException {
+    try {
+      return new SQLServerExportRecordWriter(context);
+    } catch (Exception e) {
+      throw new IOException(e);
+    }
+  }
+
+  /**
+   * RecordWriter to write the output to a row in a database table.
+   * The actual database updates are executed in a second thread.
+   */
+  public class SQLServerExportRecordWriter extends ExportRecordWriter {
+
+    public SQLServerExportRecordWriter(TaskAttemptContext context)
+        throws ClassNotFoundException, SQLException {
+      super(context);
+    }
+
+    @Override
+    /**
+     * @return an INSERT statement suitable for inserting 'numRows' rows.
+     */
+    protected String getInsertStatement(int numRows) {
+      StringBuilder sb = new StringBuilder();
+
+      sb.append("INSERT INTO " + getTableName() + " ");
+
+      int numSlots;
+      String [] colNames = getColumnNames();
+      if (colNames != null) {
+        numSlots = colNames.length;
+
+        sb.append("(");
+        boolean first = true;
+        for (String col : colNames) {
+          if (!first) {
+            sb.append(", ");
+          }
+
+          sb.append(col);
+          first = false;
+        }
+
+        sb.append(") ");
+      } else {
+        numSlots = getColumnCount(); // set if columnNames is null.
+      }
+
+      // generates the (?, ?, ?...) used for each row.
+      StringBuilder sbRow = new StringBuilder();
+      sbRow.append("(SELECT ");
+      for (int i = 0; i < numSlots; i++) {
+        if (i != 0) {
+          sbRow.append(", ");
+        }
+
+        sbRow.append("?");
+      }
+      sbRow.append(") ");
+
+      // Now append that numRows times.
+      for (int i = 0; i < numRows; i++) {
+        if (i != 0) {
+          sb.append("UNION ALL ");
+        }
+
+        sb.append(sbRow);
+      }
+
+      return sb.toString();
+    }
+  }
+}
diff --git a/src/test/com/cloudera/sqoop/manager/SQLServerManagerImportManualTest.java b/src/test/com/cloudera/sqoop/manager/SQLServerManagerImportManualTest.java
new file mode 100644
index 0000000..ff3c700
--- /dev/null
+++ b/src/test/com/cloudera/sqoop/manager/SQLServerManagerImportManualTest.java
@@ -0,0 +1,244 @@
+/**
+ * Licensed to Cloudera, Inc. under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  Cloudera, Inc. licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.cloudera.sqoop.manager;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.TimeZone;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.io.IOUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.cloudera.sqoop.SqoopOptions;
+import com.cloudera.sqoop.testutil.CommonArgs;
+import com.cloudera.sqoop.testutil.ImportJobTestCase;
+import com.cloudera.sqoop.util.FileListing;
+
+/**
+ * Test the SQLServerManager implementation.
+ *
+ * This uses JDBC to import data from an SQLServer database into HDFS.
+ *
+ * Since this requires an SQLServer installation,
+ * this class is named in such a way that Sqoop's default QA process does
+ * not run it. You need to run this manually with
+ * -Dtestcase=SQLServerManagerImportManualTest.
+ *
+ * You need to put SQL Server JDBC driver library (sqljdbc4.jar) in a location
+ * where Sqoop will be able to access it (since this library cannot be checked
+ * into Apache's tree for licensing reasons).
+ *
+ * To set up your test environment:
+ *   Install SQL Server Express 2008 R2
+ *   Create a database SQOOPTEST
+ *   Create a login SQOOPUSER with password PASSWORD and grant all
+ *   access for SQOOPTEST to SQOOPUSER.
+ */
+public class SQLServerManagerImportManualTest extends ImportJobTestCase {
+
+  public static final Log LOG = LogFactory.getLog(
+          SQLServerManagerImportManualTest.class.getName());
+
+  static final String HOST_URL = System.getProperty(
+          "sqoop.test.sqlserver.connectstring.host_url",
+          "jdbc:sqlserver://sqlserverhost:1433");
+
+  static final String DATABASE_NAME = "SQOOPTEST";
+  static final String DATABASE_USER = "SQOOPUSER";
+  static final String DATABASE_PASSWORD = "PASSWORD";
+  static final String TABLE_NAME = "EMPLOYEES_MSSQL";
+  static final String CONNECT_STRING = HOST_URL
+              + ";databaseName=" + DATABASE_NAME;
+
+  // instance variables populated during setUp, used during tests
+  private SQLServerManager manager;
+
+  @Override
+  protected boolean useHsqldbTestServer() {
+    return false;
+  }
+
+  @Before
+  public void setUp() {
+    super.setUp();
+
+    SqoopOptions options = new SqoopOptions(CONNECT_STRING,
+        TABLE_NAME);
+    options.setUsername(DATABASE_USER);
+    options.setPassword(DATABASE_PASSWORD);
+
+    manager = new SQLServerManager(options);
+
+    // Drop the existing table, if there is one.
+    Connection conn = null;
+    Statement stmt = null;
+    try {
+      conn = manager.getConnection();
+      stmt = conn.createStatement();
+      stmt.execute("DROP TABLE " + TABLE_NAME);
+    } catch (SQLException sqlE) {
+      LOG.info("Table was not dropped: " + sqlE.getMessage());
+    } finally {
+      try {
+        if (null != stmt) {
+          stmt.close();
+        }
+      } catch (Exception ex) {
+        LOG.warn("Exception while closing stmt", ex);
+      }
+    }
+
+    // Create and populate table
+    try {
+      conn = manager.getConnection();
+      conn.setAutoCommit(false);
+      stmt = conn.createStatement();
+
+      // create the database table and populate it with data.
+      stmt.executeUpdate("CREATE TABLE " + TABLE_NAME + " ("
+          + "id INT NOT NULL, "
+          + "name VARCHAR(24) NOT NULL, "
+          + "salary FLOAT, "
+          + "dept VARCHAR(32), "
+          + "PRIMARY KEY (id))");
+
+      stmt.executeUpdate("INSERT INTO " + TABLE_NAME + " VALUES("
+          + "1,'Aaron', "
+          + "1000000.00,'engineering')");
+      stmt.executeUpdate("INSERT INTO " + TABLE_NAME + " VALUES("
+          + "2,'Bob', "
+          + "400.00,'sales')");
+      stmt.executeUpdate("INSERT INTO " + TABLE_NAME + " VALUES("
+          + "3,'Fred', 15.00,"
+          + "'marketing')");
+      conn.commit();
+    } catch (SQLException sqlE) {
+      LOG.error("Encountered SQL Exception: ", sqlE);
+      sqlE.printStackTrace();
+      fail("SQLException when running test setUp(): " + sqlE);
+    } finally {
+      try {
+        if (null != stmt) {
+          stmt.close();
+        }
+      } catch (Exception ex) {
+        LOG.warn("Exception while closing connection/stmt", ex);
+      }
+    }
+  }
+
+  @After
+  public void tearDown() {
+    super.tearDown();
+    try {
+      manager.close();
+    } catch (SQLException sqlE) {
+      LOG.error("Got SQLException: " + sqlE.toString());
+      fail("Got SQLException: " + sqlE.toString());
+    }
+  }
+
+  @Test
+  public void testSQLServerImport() throws IOException {
+    String [] expectedResults = {
+      "1,Aaron,1000000.0,engineering",
+      "2,Bob,400.0,sales",
+      "3,Fred,15.0,marketing"
+    };
+
+    runSQLServerTest(expectedResults);
+  }
+
+  private String [] getArgv() {
+    ArrayList<String> args = new ArrayList<String>();
+
+    CommonArgs.addHadoopFlags(args);
+
+    args.add("--table");
+    args.add(TABLE_NAME);
+    args.add("--warehouse-dir");
+    args.add(getWarehouseDir());
+    args.add("--connect");
+    args.add(CONNECT_STRING);
+    args.add("--username");
+    args.add(DATABASE_USER);
+    args.add("--password");
+    args.add(DATABASE_PASSWORD);
+    args.add("--num-mappers");
+    args.add("1");
+
+    return args.toArray(new String[0]);
+  }
+
+  private void runSQLServerTest(String [] expectedResults) throws IOException {
+
+    Path warehousePath = new Path(this.getWarehouseDir());
+    Path tablePath = new Path(warehousePath, TABLE_NAME);
+    Path filePath = new Path(tablePath, "part-m-00000");
+
+    File tableFile = new File(tablePath.toString());
+    if (tableFile.exists() && tableFile.isDirectory()) {
+      // remove the directory before running the import.
+      FileListing.recursiveDeleteDir(tableFile);
+    }
+
+    String [] argv = getArgv();
+    try {
+      runImport(argv);
+    } catch (IOException ioe) {
+      LOG.error("Got IOException during import: " + ioe.toString());
+      ioe.printStackTrace();
+      fail(ioe.toString());
+    }
+
+    File f = new File(filePath.toString());
+    assertTrue("Could not find imported data file", f.exists());
+    BufferedReader r = null;
+    try {
+      // Read through the file and make sure it's all there.
+      r = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
+      for (String expectedLine : expectedResults) {
+        assertEquals(expectedLine, r.readLine());
+      }
+    } catch (IOException ioe) {
+      LOG.error("Got IOException verifying results: " + ioe.toString());
+      ioe.printStackTrace();
+      fail(ioe.toString());
+    } finally {
+      IOUtils.closeStream(r);
+    }
+  }
+}
-- 
1.7.0.4

